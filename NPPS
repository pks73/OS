#include<stdio.h>

struct Process {
    int pid;
    int arrival;
    int burst;
    int priority;
    int completion;
    int turnaround;
    int waiting;
    int completed;
};

int main() {
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    
    struct Process p[n];
    
    for(int i=0; i<n; i++) {
        p[i].pid = i+1;
        printf("Enter arrival time for P%d: ", i+1);
        scanf("%d", &p[i].arrival);
        printf("Enter burst time for P%d: ", i+1);
        scanf("%d", &p[i].burst);
        printf("Enter priority for P%d: ", i+1);
        scanf("%d", &p[i].priority);
        p[i].completed = 0;
    }
    
    int current_time = 0;
    int completed = 0;
    int total_waiting = 0;
    int total_turnaround = 0;
    
    printf("\nGantt Chart:\n");
    printf("%d", current_time);
    
    while(completed < n) {
        int highest_priority = 9999;
        int selected_process = -1;
        
        for(int i=0; i<n; i++) {
            if(p[i].arrival <= current_time && p[i].completed == 0) {
                if(p[i].priority < highest_priority) {
                    highest_priority = p[i].priority;
                    selected_process = i;
                }
                if(p[i].priority == highest_priority) {
                    if(p[i].arrival < p[selected_process].arrival) {
                        selected_process = i;
                    }
                }
            }
        }
        
        if(selected_process == -1) {
            current_time++;
            continue;
        }
        
        printf(" -> P%d -> %d", p[selected_process].pid, current_time + p[selected_process].burst);
        
        current_time += p[selected_process].burst;
        p[selected_process].completion = current_time;
        p[selected_process].turnaround = p[selected_process].completion - p[selected_process].arrival;
        p[selected_process].waiting = p[selected_process].turnaround - p[selected_process].burst;
        p[selected_process].completed = 1;
        
        total_waiting += p[selected_process].waiting;
        total_turnaround += p[selected_process].turnaround;
        completed++;
    }
    
    printf("\n\nProcess Table:\n");
    printf("PID\tArrival\tBurst\tPriority\tCompletion\tTurnaround\tWaiting\n");
    for(int i=0; i<n; i++) {
        printf("P%d\t%d\t%d\t%d\t\t%d\t\t%d\t\t%d\n", 
               p[i].pid, p[i].arrival, p[i].burst, p[i].priority,
               p[i].completion, p[i].turnaround, p[i].waiting);
    }
    
    printf("\nAverage Turnaround Time: %.2f\n", (float)total_turnaround/n);
    printf("Average Waiting Time: %.2f\n", (float)total_waiting/n);
    
    return 0;
}
