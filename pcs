#include<stdio.h>
#include<unistd.h>
#include<stdlib.h>
#include<sys/wait.h>

void bubbleSort(int arr[], int n) {
    int temp;
    for(int i=0; i<n-1; i++) {
        for(int j=0; j<n-i-1; j++) {
            if(arr[j] > arr[j+1]) {
                temp = arr[j];
                arr[j] = arr[j+1];
                arr[j+1] = temp;
            }
        }
    }
}

void insertionSort(int arr[], int n) {
    int key, j;
    for(int i=1; i<n; i++) {
        key = arr[i];
        j = i-1;
        while(j>=0 && arr[j]>key) {
            arr[j+1] = arr[j];
            j--;
        }
        arr[j+1] = key;
    }
}

void printArray(int arr[], int n) {
    for(int i=0; i<n; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
}

int main() {
    int n;
    
    printf("Enter number of elements: ");
    scanf("%d", &n);
    
    int arr[n];
    printf("Enter %d elements: ", n);
    for(int i=0; i<n; i++) {
        scanf("%d", &arr[i]);
    }
    
    pid_t pid = fork();
    
    if(pid > 0) {
        wait(NULL);
        printf("\nParent Process (Bubble Sort):\n");
        bubbleSort(arr, n);
        printf("Sorted array: ");
        printArray(arr, n);
    }
    else if(pid == 0) {
        printf("Child Process (Insertion Sort):\n");
        insertionSort(arr, n);
        printf("Sorted array: ");
        printArray(arr, n);
    }
    else {
        printf("Fork failed!\n");
    }
    
    return 0;
}
