#include <stdio.h>
#include <stdlib.h>

struct Process {
    int pid;
    int arrival;
    int burst;
    int remaining;
    int completion;
    int turnaround;
    int waiting;
};

void roundRobin(struct Process p[], int n, int time_quantum) {
    int current_time = 0;
    int completed = 0;
    int total_waiting = 0, total_turnaround = 0;
    
    for(int i = 0; i < n; i++) {
        p[i].remaining = p[i].burst;
    }
    
    printf("\n*** Gantt Chart ***\n");
    printf("0");
    
    while(completed < n) {
        int all_done = 1;
        
        for(int i = 0; i < n; i++) {
            if(p[i].arrival <= current_time && p[i].remaining > 0) {
                all_done = 0;
                
                int execution_time = (p[i].remaining < time_quantum) ? p[i].remaining : time_quantum;
                
                printf(" -> P%d -> %d", p[i].pid, current_time + execution_time);
                
                current_time += execution_time;
                p[i].remaining -= execution_time;
                
                if(p[i].remaining == 0) {
                    completed++;
                    p[i].completion = current_time;
                    p[i].turnaround = p[i].completion - p[i].arrival;
                    p[i].waiting = p[i].turnaround - p[i].burst;
                    
                    total_turnaround += p[i].turnaround;
                    total_waiting += p[i].waiting;
                }
            }
        }
        
        if(all_done) {
            current_time++;
        }
    }
    
    printf("\n\n*** Process Details ***\n");
    printf("PID\tArrival\tBurst\tCompletion\tTurnaround\tWaiting\n");
    for(int i = 0; i < n; i++) {
        printf("P%d\t%d\t%d\t%d\t\t%d\t\t%d\n", 
               p[i].pid, p[i].arrival, p[i].burst, 
               p[i].completion, p[i].turnaround, p[i].waiting);
    }
    
    printf("\n*** Average Times ***\n");
    printf("Average Turnaround Time: %.2f\n", (float)total_turnaround / n);
    printf("Average Waiting Time: %.2f\n", (float)total_waiting / n);
}

int main() {
    int n, time_quantum;
    
    printf("=== Round Robin CPU Scheduling ===\n");
    
    printf("Enter number of processes: ");
    scanf("%d", &n);
    
    struct Process processes[n];
    
    for(int i = 0; i < n; i++) {
        processes[i].pid = i + 1;
        printf("\nProcess P%d:\n", i + 1);
        printf("Enter Arrival Time: ");
        scanf("%d", &processes[i].arrival);
        printf("Enter Burst Time: ");
        scanf("%d", &processes[i].burst);
    }
    
    printf("\nEnter Time Quantum: ");
    scanf("%d", &time_quantum);
    
    for(int i = 0; i < n - 1; i++) {
        for(int j = 0; j < n - i - 1; j++) {
            if(processes[j].arrival > processes[j + 1].arrival) {
                struct Process temp = processes[j];
                processes[j] = processes[j + 1];
                processes[j + 1] = temp;
            }
        }
    }
    
    roundRobin(processes, n, time_quantum);
    
    return 0;
}
